#!/bin/bash

bundle_name="$(basename "$0")"
input_2="$2"
input_3="$3"
input_4="$4"
input_5="$5"

resize_for_phone() {
  if [[ "$input_2" = "" ]]; then
    printf '%b\n' "\e[31m! \e[0myou missed an argument.\n\e[1musage:\e[0m $bundle_name -p <image-path>"
  elif convert "$input_2" -resize x1560 -gravity Center -extent 720x1560 resized-"$input_2"; then
    printf '%s\n' "Resized to 720x1560!"
  fi
}

weather() {
  if [[ "$input_2" = "" ]]; then
    curl -H "Accept-Language: tr" wttr.in
  else
    curl -H "Accept-Language: tr" wttr.in/"$input_2"
  fi
}

colors_match() {
  T='ABC' # The text for the color test

  echo -e "\n         def     40m     41m     42m     43m     44m     45m     46m     47m"

  for FGs in '    m' '   1m' '  30m' '1;90m' '  31m' '1;91m' '  32m' \
    '1;92m' '  33m' '1;93m' '  34m' '1;94m' '  35m' '1;95m' \
    '  36m' '1;96m' '  37m' '1;97m'; do
    FG=${FGs// /}
    echo -en " $FGs \033[$FG  $T  "

    for BG in 40m 41m 42m 43m 44m 45m 46m 47m; do
      echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m"
    done
    echo
  done
  echo
}

colors() {
  f=3
  b=4
  for j in f b; do
    for i in {0..7}; do
      printf -v $j"$i" %b "\e[${!j}${i}m"
    done
  done

  for i in {0..7}; do
    printf -v fbright"$i" %b "\e[9${i}m"
  done

  d=$'\e[1m'
  t=$'\e[0m'
  v=$'\e[7m'

  printf "
$f1███$d$fbright$fbright1▄$t  $f2███$d$fbright$fbright2▄$t  $f3███$d$fbright3▄$t  $f4███$d$fbright4▄$t  $f5███$d$fbright5▄$t  $f6███$d$fbright6▄$t  $f7███$d$fbright7▄$t  
$f1███$d$fbright$fbright1█$t  $f2███$d$fbright$fbright2█$t  $f3███$d$fbright3█$t  $f4███$d$fbright4█$t  $f5███$d$fbright5█$t  $f6███$d$fbright6█$t  $f7███$d$fbright7█$t  
$f1███$d$fbright$fbright1█$t  $f2███$d$fbright$fbright2█$t  $f3███$d$fbright3█$t  $f4███$d$fbright4█$t  $f5███$d$fbright5█$t  $f6███$d$fbright6█$t  $f7███$d$fbright7█$t  
$d$fbright1 ▀▀▀   $fbright2▀▀▀   $fbright3▀▀▀   $fbright4▀▀▀   $fbright5▀▀▀   $fbright6▀▀▀   $fbright7▀▀▀
"

}

solid_wallpaper() {

  if [[ $input_3 == "" ]]; then
    color_code=$(hexdump -n 3 -v -e '"#" 3/1 "%02X" "\n"' /dev/urandom)
  else
    color_code=$input_3
  fi

  case $input_2 in
  pc)
    convert -size 1920x1080 xc:"$color_code" PNG:"$HOME/img/.wallpaper"
    $HOME/.config/feh/.fehbg
    ;;
  phone) convert -size 1080x2340 xc:"$color_code" ./wallpaper.png ;;
  *) printf '%b\n' "\e[31m! \e[0myou missed some arguments.\n\e[1musage:\e[0m $bundle_name -W pc #colorcode" ;;
  esac
}

ffsend_qr() {
  url=$(ffsend upload -c -q "$input_2")
  qrencode -t UTF8 --foreground=000000 --background=ffffff -l M -s 20 $url
  echo "$url"
}

forest_invitation() {

  declare -a emoji_list
  emoji_list=(
    "bamboo"
    "cherry_blossom"
    "christmas_tree"
    "ear_of_rice"
    "fallen_leaf"
    "feather"
    "four_leaf_clover"
    "herb"
    "hibiscus"
    "leaves"
    "lobster"
    "maple_leaf"
    "mushroom"
    "palm_tree"
    "shell"
    "tanabata_tree"
    "wood"
  )

  rand=$(($RANDOM % ${#emoji_list[@]}))
  emoji=${emoji_list[$rand]}

  if [[ $input_3 == "auto" ]]; then

    adb exec-out screencap -p >.screen.png
    convert .screen.png -colorspace Gray .screen.png
    convert .screen.png -negate .screen.png
    tesseract .screen.png .ocr -l eng
    forest_code=$(grep "Room Code" ./.ocr.txt | cut -d " " -f 3)
  else
    forest_code=$input_3
  fi

  if [[ $input_4 == "" ]]; then
    duration=60
  else
    duration=$input_4
  fi

  if [[ $input_5 == "" ]]; then
    starting=10
  else
    starting=$input_5
  fi

  text=":$emoji: **$input_2** :$emoji:
:$emoji: **Duration:** $duration minutes
:$emoji: **Starting in:** $starting minutes ($(date -d "now $starting minutes" +'XX:%M'))
:$emoji: **Code:** $forest_code
:$emoji: **Link:** https://forestapp.cc/join-room?token=$forest_code
:$emoji: *React with anything if joining*
:$emoji: *React with :1812_wutcat: for ping*"

  printf '%b\n\n' "Here is your invitation text:"
  printf '%b\n' "$text"

  echo "$text" | wl-copy

  [[ -f ./.screen.png ]] && rm ./.screen.png
  [[ -f ./.ocr.txt ]] && rm ./.ocr.txt
}

sun_state() {
  # First obtain a location code from: https://weather.codes/search/

  # Insert your location. For example TUXX0033 is a location code for Çorum, Türkiye
  location="TUXX0033"
  tmpfile=/tmp/$location.out
  infofile=$HOME/.cache/logs/$location-sun.info

  # Obtain sunrise and sunset raw data from weather.com
  wget -q "https://weather.com/weather/today/l/$location" -O "$tmpfile"

  SUNR=$(grep SunriseSunset "$tmpfile" | grep -oE '((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))' | head -1)
  SUNS=$(grep SunriseSunset "$tmpfile" | grep -oE '((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))' | tail -1)

  sunrise=$(date --date="$SUNR" +%R)
  sunset=$(date --date="$SUNS" +%R)

  # Use $sunrise and $sunset variables to fit your needs. Example:
  cat <<EOF >$infofile
$sunrise
$sunset
EOF

  echo "$sunrise - $sunset"
}

image_square() {

  if [[ "$input_2" = "" ]]; then
    printf '%b\n' "\e[31m! \e[0myou missed an argument.\n\e[1musage:\e[0m $bundle_name -s <image-path>"
  elif convert "$input_2" -gravity center -crop $(identify -format "%[fx:min(w,h)]x%[fx:min(w,h)]+0+0" "$input_2") +repage squared-"$input_2"; then
    printf '%s\n' "Squared!"
  fi

}

caps2esc_toggle() {
  if setxkbmap -v | grep -q "swapescape"; then
    setxkbmap -option
    setxkbmap -option grp:ctrls_toggle,altwin:swap_lalt_lwin -layout tr,es
    dunstify -a "bund" -i keyboard --urgency=LOW --replace=193 "klavye sıfırlandı!" "caps ve escape tuşları gerçek yerlerine getirildi."
  else
    setxkbmap -option
    setxkbmap -option grp:ctrls_toggle,caps:swapescape,altwin:swap_lalt_lwin -layout tr,es
    dunstify -a "bund" -i keyboard --urgency=LOW --replace=193 "caps -> esc" "caps ve esc tuşları yerleri değiştirildi!"
  fi
}

list_connected_devices() {
  BROADCAST_IP="$(ifconfig | grep -oP "(?<=broadcast )(\d{1,3}\.){3}\d{1,3}")"
  sudo nmap -sP "$BROADCAST_IP/24"
}

list_passwords() {

  echo "Listing passwords in NetworkManager:"
  sudo find /etc/NetworkManager/system-connections/ -type f -exec sh -c '
    network_name=$(grep -hE "^\s*ssid=" "$1" | awk -F= "{print \$2}")
    password=$(grep -hE "^\s*psk=" "$1" | awk -F= "{print \$2}")
    if [ -n "$password" ]; then
      echo -e "\033[1m${network_name}\033[0m\n${password}\n"
    fi
  ' sh {} \;
}

take_picture_with_date() {
  [ -d $HOME/img/lock ] || mkdir $HOME/img/lock
  dest="$HOME/img/lock/$(date +'%Y-%m-%d_%H.%M.%S').jpeg"
  fswebcam -r 1280x720 --jpeg 85 "$dest"
}

print_usage() {
  printf '\n%b\n' "  \e[1mBUNDLE OF OFTUSED TOOLS\e[0m"

  printf '\n%b\n' "\e[1mINFO COMMANDS\e[0m"
  printf '%b\n' "  $bundle_name {-C --colors2}                                        show colors in different backgrounds"
  printf '%b\n' "  $bundle_name {-S --sun-state}                                      show the sunrise-sunset time for Çorum"
  printf '%b\n' "  $bundle_name {-c --colors}                                         show colors"
  printf '%b\n' "  $bundle_name {-h --help}                                           print this message"
  printf '%b\n' "  $bundle_name {-w --weather} <city>                                 show the weather for the specified city"
  printf '%b\n' "  $bundle_name {-l --list-passwords}                                 list network passwords from NetworkManager"

  printf '\n%b\n' "\e[1mACTION COMMANDS\e[0m"

  printf '%b\n' "  $bundle_name {-F --forest} [tree] auto/<code> <duration> <starts>  create forest invitation"
  printf '%b\n' "  $bundle_name {-L --list-connected}                                 list connected devices on the current network"
  printf '%b\n' "  $bundle_name {-P --powersave}                                      turn on the power saving mode"
  printf '%b\n' "  $bundle_name {-T --take-pic}                                       take picture with the date"
  printf '%b\n' "  $bundle_name {-f --ffsend}                                         ffsend qr"
  printf '%b\n' "  $bundle_name {-o --caps2esc}                                       swap caps-esc"

  printf '\n%b\n' "\e[1mIMAGE COMMANDS\e[0m"
  printf '%b\n' "  $bundle_name {-W --solid--wallpaper} [pc/phone] <hex>              make a single color wallpaper "
  printf '%b\n' "                                                             (random color if hex is empty)"
  printf '%b\n' "  $bundle_name {-p --wrff}                                           resize the image for 1560x720 screens"
  printf '%b\n\n' "  $bundle_name {-s --square}                                         resize the image as 1:1"
  exit 1
}

case $1 in
--caps2esc | -o) caps2esc_toggle ;;
--colors | -c) colors ;;
--colors2 | -C) colors_match ;;
--ffsend | -f) ffsend_qr ;;
--forest | -F) forest_invitation ;;
--list-connected | -L) list_connected_devices ;;
--list-passwords | -l) list_passwords ;;
--solid-wallpaper | -W) solid_wallpaper ;;
--square | -s) image_square ;;
--sun-state | -S) sun_state ;;
--weather | -w) weather ;;
--wrff | -p) resize_for_phone ;;
--take-pic | -T) take_picture_with_date ;;
*) print_usage ;;
esac
